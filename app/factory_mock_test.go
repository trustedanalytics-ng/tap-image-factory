/**
 * Copyright (c) 2017 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Automatically generated by MockGen. DO NOT EDIT!
// Source: app/factory.go

package app

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of FactoryAPI interface
type MockFactoryAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockFactoryAPIRecorder
}

// Recorder for MockFactoryAPI (not exported)
type _MockFactoryAPIRecorder struct {
	mock *MockFactoryAPI
}

func NewMockFactoryAPI(ctrl *gomock.Controller) *MockFactoryAPI {
	mock := &MockFactoryAPI{ctrl: ctrl}
	mock.recorder = &_MockFactoryAPIRecorder{mock}
	return mock
}

func (_m *MockFactoryAPI) EXPECT() *_MockFactoryAPIRecorder {
	return _m.recorder
}

func (_m *MockFactoryAPI) BuildAndPushImage(imageID string) error {
	ret := _m.ctrl.Call(_m, "BuildAndPushImage", imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFactoryAPIRecorder) BuildAndPushImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildAndPushImage", arg0)
}

// Mock of ImageReadinessChecker interface
type MockImageReadinessChecker struct {
	ctrl     *gomock.Controller
	recorder *_MockImageReadinessCheckerRecorder
}

// Recorder for MockImageReadinessChecker (not exported)
type _MockImageReadinessCheckerRecorder struct {
	mock *MockImageReadinessChecker
}

func NewMockImageReadinessChecker(ctrl *gomock.Controller) *MockImageReadinessChecker {
	mock := &MockImageReadinessChecker{ctrl: ctrl}
	mock.recorder = &_MockImageReadinessCheckerRecorder{mock}
	return mock
}

func (_m *MockImageReadinessChecker) EXPECT() *_MockImageReadinessCheckerRecorder {
	return _m.recorder
}

func (_m *MockImageReadinessChecker) IsImageReady(imageID string, imageTag string) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsImageReady", imageID, imageTag)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockImageReadinessCheckerRecorder) IsImageReady(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsImageReady", arg0, arg1)
}
